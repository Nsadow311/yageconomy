// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEconomyPickImages(t *testing.T) {
	t.Parallel()

	query := EconomyPickImages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEconomyPickImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EconomyPickImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEconomyPickImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EconomyPickImages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EconomyPickImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEconomyPickImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EconomyPickImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EconomyPickImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEconomyPickImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EconomyPickImageExists(ctx, tx, o.GuildID)
	if err != nil {
		t.Errorf("Unable to check if EconomyPickImage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EconomyPickImageExists to return true, but got false.")
	}
}

func testEconomyPickImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	economyPickImageFound, err := FindEconomyPickImage(ctx, tx, o.GuildID)
	if err != nil {
		t.Error(err)
	}

	if economyPickImageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEconomyPickImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EconomyPickImages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEconomyPickImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EconomyPickImages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEconomyPickImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	economyPickImageOne := &EconomyPickImage{}
	economyPickImageTwo := &EconomyPickImage{}
	if err = randomize.Struct(seed, economyPickImageOne, economyPickImageDBTypes, false, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}
	if err = randomize.Struct(seed, economyPickImageTwo, economyPickImageDBTypes, false, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = economyPickImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = economyPickImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EconomyPickImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEconomyPickImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	economyPickImageOne := &EconomyPickImage{}
	economyPickImageTwo := &EconomyPickImage{}
	if err = randomize.Struct(seed, economyPickImageOne, economyPickImageDBTypes, false, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}
	if err = randomize.Struct(seed, economyPickImageTwo, economyPickImageDBTypes, false, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = economyPickImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = economyPickImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EconomyPickImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testEconomyPickImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EconomyPickImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEconomyPickImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(economyPickImageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EconomyPickImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEconomyPickImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEconomyPickImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EconomyPickImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEconomyPickImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EconomyPickImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	economyPickImageDBTypes = map[string]string{`GuildID`: `bigint`, `Image`: `bytea`}
	_                       = bytes.MinRead
)

func testEconomyPickImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(economyPickImagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(economyPickImageColumns) == len(economyPickImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EconomyPickImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEconomyPickImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(economyPickImageColumns) == len(economyPickImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EconomyPickImage{}
	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EconomyPickImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, economyPickImageDBTypes, true, economyPickImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(economyPickImageColumns, economyPickImagePrimaryKeyColumns) {
		fields = economyPickImageColumns
	} else {
		fields = strmangle.SetComplement(
			economyPickImageColumns,
			economyPickImagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EconomyPickImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEconomyPickImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(economyPickImageColumns) == len(economyPickImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EconomyPickImage{}
	if err = randomize.Struct(seed, &o, economyPickImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EconomyPickImage: %s", err)
	}

	count, err := EconomyPickImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, economyPickImageDBTypes, false, economyPickImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EconomyPickImage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EconomyPickImage: %s", err)
	}

	count, err = EconomyPickImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
